##State and Explain the components of a DBMS(Database Management System)


Database Engine: The core service for accessing and processing the database. It handles data storage, retrieval, and updates.

Database Schema: The structure that defines the organization of data, including tables, fields, relationships, views, indexes, and constraints.

Query Processor: Translates SQL queries into commands that the database engine can execute. It optimizes the queries for efficient execution.

Transaction Management: Ensures that database transactions are processed reliably and adheres to the ACID properties (Atomicity, Consistency, Isolation, Durability).

Data Dictionary: A metadata repository that stores information about the database structure, including data types, constraints, and relationships.

User Interface: The interface through which users interact with the DBMS, which can be command-line based or graphical.

Security Management: Controls access to the database and ensures that only authorized users can perform certain actions.

##What is a relational database? Give 4 examples.

A relational database is a type of database that stores data in structured formats using rows and columns. It uses a schema to define the structure of the data and relationships between different data entities. The data is organized into tables, and relationships between tables are established through the use of keys (primary and foreign keys).

Examples of Relational Databases:

MySQL
PostgreSQL
Microsoft SQL Server
Oracle Database

##State and Explain three classifications of SQL?

Data Definition Language (DDL): Used to define and manage all database objects such as tables, indexes, and schemas. Common commands include CREATE, ALTER, and DROP.

Data Manipulation Language (DML): Used for managing and manipulating data within the database. Common commands include SELECT, INSERT, UPDATE, and DELETE.

Data Control Language (DCL): Used to control access to data within the database. Common commands include GRANT and REVOKE.

##What is the difference between a Primary Key and a Foreign Key?

Primary Key:

A primary key is a unique identifier for a record in a table. It ensures that each record can be uniquely identified and cannot contain NULL values.
Example: In a Customers table, the CustomerID could be a primary key.

Foreign Key:

A foreign key is a field (or collection of fields) in one table that uniquely identifies a record in another table. It establishes a link between the two tables.
Example: In an Orders table, the CustomerID could be a foreign key that references the CustomerID in the Customers table.

##What is an Entity-Relationship Diagram?

An Entity-Relationship Diagram (ERD) is a visual representation of the entities (tables) in a database and the relationships between them. It helps in designing the database structure by illustrating how data entities interact with each other. ERDs use symbols to represent entities, attributes, and relationships, aiding in understanding and communicating the database design.

##What are the advantages of relational databases?

Data Integrity: Relational databases enforce data integrity through constraints like primary keys, foreign keys, and unique constraints.

Flexibility: They allow for complex queries and data retrieval through SQL, enabling users to easily access and manipulate data.

Normalization: Data can be organized efficiently to minimize redundancy and dependency through normalization techniques.

Security: Relational databases offer robust security features, allowing for user access control and permissions.


##State four types of data type used to store data in tables?

Integer: Used to store whole numbers (e.g., INT, BIGINT).

String: Used to store text data (e.g., VARCHAR, CHAR, TEXT).

Date/Time: Used to store date and time values (e.g., DATE, TIME, DATETIME).

Float/Decimal: Used to store decimal numbers (e.g., FLOAT, DECIMAL).


##What is the purpose of a database management system (DBMS)?

The purpose of a Database Management System (DBMS) is to provide a systematic way to create, retrieve, update, and manage data in databases. It serves as an intermediary between users and the database, allowing for efficient data management, ensuring data integrity, providing security, and facilitating data sharing and collaboration among multiple users. A DBMS also simplifies the process of data manipulation through the use of high-level query languages like SQL.
